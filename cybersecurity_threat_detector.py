# -*- coding: utf-8 -*-
"""Cybersecurity Threat Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1akwR_M98rK14s6KwhmZs7fnqjzEyE-y5
"""

# Basic ML + Visualization libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ML models
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report, roc_curve
from sklearn.model_selection import train_test_split
import joblib

df = pd.read_csv("/content/Data/Tuesday-WorkingHours.pcap_ISCX.csv")  # replace with actual filename
# Shape of dataset
print("Shape:", df.shape)

# Preview
display(df.head())

# Check missing values
print("\nMissing values per column:")
print(df.isnull().sum())

# Label distribution
print("\nLabel distribution:")
print(df[' Label'].value_counts())

# Drop rows with NaN
df = df.dropna()

# Encode target label
le = LabelEncoder()
df[' Label'] = le.fit_transform(df[' Label'])

# Separate features & labels
X = df.drop(columns=[' Label'])
y = df[' Label']

print("Features shape:", X.shape)
print("Target shape:", y.shape)

# @title Default title text
# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Isolation Forest
iso = IsolationForest(n_estimators=100, contamination=0.1, random_state=42)
iso.fit(X_train)

# Predict (IsolationForest returns -1 for anomaly, 1 for normal)
y_pred = iso.predict(X_test)

# Convert predictions: -1 -> 1 (attack), 1 -> 0 (benign)
y_pred = [0 if p == 1 else 1 for p in y_pred]

# Convert y_test to binary labels: 0 (Benign) and 1 (Attack)
y_test_binary = [0 if label == 0 else 1 for label in y_test]


print(classification_report(y_test_binary, y_pred, target_names=['Benign','Attack']))

if y_test_binary is not None:
    # Classification report
    print(classification_report(y_test_binary, y_pred, target_names=['Benign','Attack']))

    # Confusion Matrix
    cm = confusion_matrix(y_test_binary, y_pred)
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
    plt.xlabel("Predicted")
    plt.ylabel("True")
    plt.title("Confusion Matrix")
    plt.show()

    # ROC-AUC Score
    roc_score = roc_auc_score(y_test_binary, y_pred)
    print("ROC-AUC:", roc_score)

    # ROC Curve
    fpr, tpr, _ = roc_curve(y_test_binary, y_pred)
    plt.plot(fpr, tpr, label=f"ROC curve (area = {roc_score:.2f})")
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.legend()
    plt.title("ROC Curve")
    plt.show()

joblib.dump(iso, "cyber_model.pkl")
files.download("cyber_model.pkl")  # to download model locally

